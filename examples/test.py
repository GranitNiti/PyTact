import syssys.path.append('../')from engine import *from tacton import *if __name__ == '__main__':    visualiser = LinePatternVisualiser(no_actuators=4)    visualiser.init()    engine = LogStimulationEngine(visualiser=visualiser)    sequences = [        ('1', [[1]]),        ('2', [[2]]),        ('3', [[3]]),        ('4', [[4]]),        ('left', [[1], [2], [3]]),        ('right', [[3], [2], [1]])    ]    shape = SignalShape.SQUARE    stimtype = StimuliTypes.SPATIO_TEMPORAL    intensity_min = 3    patternTactons = []    stim_duration, frequency, intensity, pulsewidth, intermediate_duration= 0.5, 100, 10, 100, 0.2    for label, sequence in sequences:        groups = []        for channels in sequence:            tactons = []            for channel in channels:                tacton = SingleTactonFES(stim_duration, frequency, intensity, pulsewidth, channel, intensity_min, shape)                tactons.append(tacton)            group = SimultaneousTactonsGroup(stim_duration, tactons, 0.005)            groups.append(group)        patternTacton = PatternTacton(intermediate_duration, groups, stimtype, label)        patternTacton.set_stimulation_type(stimtype)        patternTactons.append(patternTacton)    engine.connect()    engine.set_frequency(frequency)    def print_help():        'enter a number between 0 and ', len(sequences) - 1, 'or q to exit'        for ix in range(len(patternTactons)):            print ix, patternTactons[ix].get_label()    print_help()    while True:        line = raw_input()        if line == "q":            print('exiting')            engine.disconnect()            break        if line.isdigit():            ix = int(line)            if 0 <= ix < len(patternTactons):                patternTacton = patternTactons[ix]                engine.stimulate_pattern(patternTacton)            else:                print_help()        else:            print_help()        print ''        print 'Enter a number between 0 and ', len(patternTactons) - 1, 'or q to exit'    # python stim.py 38400 3 0.2 0.05 4 300 99 1